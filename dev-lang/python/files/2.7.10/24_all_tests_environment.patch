http://bugs.python.org/issue1674555

--- Lib/site.py
+++ Lib/site.py
@@ -543,8 +543,9 @@
         addbuilddir()
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    known_paths = addusersitepackages(known_paths)
-    known_paths = addsitepackages(known_paths)
+    if os.environ.get("_PYTHONNOSITEPACKAGES") is None:
+        known_paths = addusersitepackages(known_paths)
+        known_paths = addsitepackages(known_paths)
     if sys.platform == 'os2emx':
         setBEGINLIBPATH()
     setquit()
--- Lib/test/regrtest.py
+++ Lib/test/regrtest.py
@@ -167,6 +167,7 @@
 import imp
 import platform
 import sysconfig
+from subprocess import Popen, PIPE
 
 
 # Some times __path__ and __file__ are not absolute (e.g. while running from
@@ -450,6 +451,49 @@
     test_support.use_resources = use_resources
     save_modules = sys.modules.keys()
 
+    opt_args = test_support.args_from_interpreter_flags()
+    base_cmd = [sys.executable] + opt_args + ['-m', 'test.regrtest']
+    debug_output_pat = re.compile(r"\[\d+ refs\]$")
+
+    def get_args_tuple(test, verbose, quiet, huntrleaks, use_resources):
+        return (
+            (test, verbose, quiet),
+            dict(huntrleaks=huntrleaks, use_resources=use_resources)
+        )
+
+    def _runtest(test, verbose, quiet, huntrleaks=False,
+                 use_resources=None):
+        if test == "test_site":
+            args_tuple = get_args_tuple(test, verbose, quiet, huntrleaks,
+                                        use_resources)
+            env = os.environ.copy()
+            try:
+                del env["_PYTHONNOSITEPACKAGES"]
+            except KeyError:
+                pass
+            popen = Popen(base_cmd + ['--slaveargs', json.dumps(args_tuple)],
+                          stdout=PIPE, stderr=PIPE,
+                          universal_newlines=True,
+                          close_fds=(os.name != 'nt'),
+                          env=env)
+            stdout, stderr = popen.communicate()
+            # Strip last refcount output line if it exists, since it
+            # comes from the shutdown of the interpreter in the subcommand.
+            stderr = debug_output_pat.sub("", stderr)
+            stdout, _, result = stdout.strip().rpartition("\n")
+            result = json.loads(result)
+            if stdout:
+                print stdout
+            if stderr:
+                print >>sys.stderr, stderr
+            if result[0] == INTERRUPTED:
+                assert result[1] == 'KeyboardInterrupt'
+                raise KeyboardInterrupt
+            return result
+        else:
+            return runtest(test, verbose, quiet, huntrleaks=False,
+                           use_resources=None)
+
     def accumulate_result(test, result):
         ok, test_time = result
         test_times.append((test_time, test))
@@ -484,19 +528,13 @@
             print "Multiprocess option requires thread support"
             sys.exit(2)
         from Queue import Queue
-        from subprocess import Popen, PIPE
-        debug_output_pat = re.compile(r"\[\d+ refs\]$")
         output = Queue()
         def tests_and_args():
             for test in tests:
-                args_tuple = (
-                    (test, verbose, quiet),
-                    dict(huntrleaks=huntrleaks, use_resources=use_resources)
-                )
+                args_tuple = get_args_tuple(test, verbose, quiet, huntrleaks,
+                                            use_resources)
                 yield (test, args_tuple)
         pending = tests_and_args()
-        opt_args = test_support.args_from_interpreter_flags()
-        base_cmd = [sys.executable] + opt_args + ['-m', 'test.regrtest']
         def work():
             # A worker thread.
             try:
@@ -557,15 +595,15 @@
             if trace:
                 # If we're tracing code coverage, then we don't exit with status
                 # if on a false return value from main.
-                tracer.runctx('runtest(test, verbose, quiet)',
+                tracer.runctx('_runtest(test, verbose, quiet)',
                               globals=globals(), locals=vars())
             else:
                 try:
-                    result = runtest(test, verbose, quiet, huntrleaks)
+                    result = _runtest(test, verbose, quiet, huntrleaks)
                     accumulate_result(test, result)
                     if verbose3 and result[0] == FAILED:
                         print "Re-running test %r in verbose mode" % test
-                        runtest(test, True, quiet, huntrleaks)
+                        _runtest(test, True, quiet, huntrleaks)
                 except KeyboardInterrupt:
                     interrupted = True
                     break
@@ -635,7 +673,7 @@
             sys.stdout.flush()
             try:
                 test_support.verbose = True
-                ok = runtest(test, True, quiet, huntrleaks)
+                ok = _runtest(test, True, quiet, huntrleaks)
             except KeyboardInterrupt:
                 # print a newline separate from the ^C
                 print
@@ -827,8 +865,9 @@
         for name, get, restore in self.resource_info():
             current = get()
             original = saved_values.pop(name)
-            # Check for changes to the resource's value
-            if current != original:
+            # Check for changes to the resource's value. test_site is always run
+            # in a subprocess and is allowed to change os.environ and sys.path.
+            if current != original and self.testname != "test_site":
                 self.changed = True
                 restore(original)
                 if not self.quiet:
--- Lib/test/test_site.py
+++ Lib/test/test_site.py
@@ -8,6 +8,7 @@
 from test.test_support import run_unittest, TESTFN, EnvironmentVarGuard
 from test.test_support import captured_output
 import __builtin__
+import imp
 import os
 import sys
 import re
@@ -21,6 +22,9 @@
 # already.
 if "site" in sys.modules:
     import site
+    if "_PYTHONNOSITEPACKAGES" in os.environ:
+        del os.environ["_PYTHONNOSITEPACKAGES"]
+        imp.reload(site)
 else:
     raise unittest.SkipTest("importation of site.py suppressed")
 
--- Makefile.pre.in
+++ Makefile.pre.in
@@ -727,7 +727,7 @@
 
 TESTOPTS=	-l $(EXTRATESTOPTS)
 TESTPROG=	$(srcdir)/Lib/test/regrtest.py
-TESTPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
+TESTPYTHON=	_PYTHONNOSITEPACKAGES=1 $(RUNSHARED) ./$(BUILDPYTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
 test:		all platform
 		-find $(srcdir)/Lib -name '*.py[co]' -print | xargs rm -f
 		-$(TESTPYTHON) $(TESTPROG) $(TESTOPTS)
