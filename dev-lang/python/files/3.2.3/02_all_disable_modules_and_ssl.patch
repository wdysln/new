--- setup.py
+++ setup.py
@@ -21,7 +21,17 @@
 COMPILED_WITH_PYDEBUG = hasattr(sys, 'gettotalrefcount')
 
 # This global variable is used to hold the list of modules to be disabled.
-disabled_module_list = []
+pdm_env = "PYTHON_DISABLE_MODULES"
+if pdm_env in os.environ:
+    disabled_module_list = os.environ[pdm_env].split()
+else:
+    disabled_module_list = []
+
+pds_env = "PYTHON_DISABLE_SSL"
+if pds_env in os.environ:
+    disable_ssl = os.environ[pds_env]
+else:
+    disable_ssl = 0
 
 # File which contains the directory for shared mods (for sys.path fixup
 # when running from the build dir, see Modules/getpath.c)
@@ -393,6 +403,7 @@
             os.unlink(tmpfile)
 
     def detect_modules(self):
+        global disable_ssl
         # Ensure that /usr/local is always used, but the local build
         # directories (i.e. '.' and 'Include') must be first.  See issue
         # 10520.
@@ -678,7 +689,7 @@
         ssl_incs = find_file('openssl/ssl.h', inc_dirs,
                              search_for_ssl_incs_in
                              )
-        if ssl_incs is not None:
+        if ssl_incs is not None and not disable_ssl:
             krb5_h = find_file('krb5.h', inc_dirs,
                                ['/usr/kerberos/include'])
             if krb5_h:
@@ -689,7 +700,8 @@
                                      ] )
 
         if (ssl_incs is not None and
-            ssl_libs is not None):
+            ssl_libs is not None and
+            not disable_ssl):
             exts.append( Extension('_ssl', ['_ssl.c'],
                                    include_dirs = ssl_incs,
                                    library_dirs = ssl_libs,
@@ -722,7 +734,7 @@
 
         #print('openssl_ver = 0x%08x' % openssl_ver)
         min_openssl_ver = 0x00907000
-        have_any_openssl = ssl_incs is not None and ssl_libs is not None
+        have_any_openssl = ssl_incs is not None and ssl_libs is not None and not disable_ssl
         have_usable_openssl = (have_any_openssl and
                                openssl_ver >= min_openssl_ver)
 
@@ -740,20 +752,17 @@
                       openssl_ver)
                 missing.append('_hashlib')
 
-        min_sha2_openssl_ver = 0x00908000
-        if COMPILED_WITH_PYDEBUG or openssl_ver < min_sha2_openssl_ver:
-            # OpenSSL doesn't do these until 0.9.8 so we'll bring our own hash
-            exts.append( Extension('_sha256', ['sha256module.c'],
-                                   depends=['hashlib.h']) )
-            exts.append( Extension('_sha512', ['sha512module.c'],
-                                   depends=['hashlib.h']) )
-
-        if COMPILED_WITH_PYDEBUG or not have_usable_openssl:
-            # no openssl at all, use our own md5 and sha1
-            exts.append( Extension('_md5', ['md5module.c'],
-                                   depends=['hashlib.h']) )
-            exts.append( Extension('_sha1', ['sha1module.c'],
-                                   depends=['hashlib.h']) )
+        ### Build these unconditionally so emerge won't fail
+        ### when openssl is dropped/broken etc.
+        exts.append( Extension('_sha256', ['sha256module.c'],
+                               depends=['hashlib.h']) )
+        exts.append( Extension('_sha512', ['sha512module.c'],
+                               depends=['hashlib.h']) )
+
+        exts.append( Extension('_md5', ['md5module.c'],
+                               depends=['hashlib.h']) )
+        exts.append( Extension('_sha1', ['sha1module.c'],
+                               depends=['hashlib.h']) )
 
         # Modules that provide persistent dictionary-like semantics.  You will
         # probably want to arrange for at least one of them to be available on
